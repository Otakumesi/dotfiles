[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'keith/parsec.vim'
hook_add='''
set background=light
au MySettings VimEnter * nested colorscheme parsec
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
noremap <C-x><C-x> <ESC>:Denite 
noremap <C-x><C-f> <ESC>:DeniteProjectDir file_rec<CR>
noremap <C-x><C-r> <ESC>:Denite file_old<CR>
noremap <C-x><C-b> <ESC>:Denite buffer<CR>
noremap <C-x><C-d><C-g> <ESC>:DeniteBufferDir grep<CR>
noremap <C-x><C-p><C-g> <ESC>:DeniteProjectDir grep<CR>
noremap <C-x><C-y> <ESC>:Denite neoyank<CR>

if executable('rg')
  call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#map('insert', '<C-g>', '<denite:enter_mode:normal>', 'noremap')
  call denite#custom#map('normal', '<C-g>', '<denite:quit>', 'noremap')
  call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<C-x>3', '<denite:do_action:split>', 'noremap')
  call denite#custom#map('insert', '<C-x>2', '<denite:do_action:vsplit>', 'noremap')
endif
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build =  'make'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
set completeopt+=menuone
call deoplete#enable_logging('DEBUG', $HOME.'/deoplete.log')
call deoplete#custom#source('jedi', 'is_debug_enabled', 1)
call deoplete#custom#option({
  \ 'on_insert_enter': v:false,
  \ 'min_pattern_length': 2
  \ })
'''

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<C-a>"
" let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
" let g:UltiSnipsListSnippets        = "<c-k>"
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'sbdchd/neoformat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
set statusline+=%{fugitive#statusline()}
'''

[[plugins]]
repo = 'tpope/vim-pathogen'

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
execute pathogen#infect()
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_go_checkers = ['go', 'golint', 'govet']
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add='''
let g:AutoPairsMapCR = 0
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
nmap <C-g><C-g> <Plug>(anzu-clear-search-status)
set statusline=%{anzu#search_status()}
'''

[[plugins]]
repo = 'vim-vdebug/vdebug'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rizzatti/dash.vim'

[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'Rykka/clickable.vim'

[[plugins]]
repo = 'Rykka/riv.vim'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
let g:echodoc#enable_at_startup = 1
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

# Ruby
[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]]
repo = 'thoughtbot/vim-rspec'

# Golang
[[plugins]]
repo = 'fatih/vim-go'

[[plugins]]
repo = 'rhysd/vim-goyacc'

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'

# JavaScript
[[plugins]]
repo ='neovim/node-host'
build = 'npm install'

[[plugins]]
repo ='pangloss/vim-javascript'

[[plugins]]
repo ='mxw/vim-jsx'

[[plugins]]
repo ='posva/vim-vue'

[[plugins]]
repo ='styled-components/vim-styled-components'

# TypeScript
[[plugins]]
repo ='leafgarland/typescript-vim'

[[plugins]]
repo ='Quramy/tsuquyomi'

# HTML / CSS
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_leader_key = '<C-c>'
let g:user_emmet_install_global = 0
au FileType html,css,javascript,typescript,scss,slim,jade,vue,jinja.html EmmetInstall
'''

[[plugins]]
repo = 'ap/vim-css-color'

# Markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'godlygeek/tabular'

# SettingFiles
[[plugins]]
repo = 'pearofducks/ansible-vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'https://raw.githubusercontent.com/google/protobuf/master/editors/proto.vim'
script_type = 'protobuf'

[[plugins]]
repo = 'hashivim/vim-terraform'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'aklt/plantuml-syntax'
hook_add = '''
let g:plantuml_executable_script = "plantuml -tsvg $@"
'''
  
# etc
[[plugins]]
repo = 'kristijanhusak/vim-carbon-now-sh'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
if !exists('g:context_filetype#same_filetypes')
  let g:context_filetype#same_filetypes = {}
end
let g:context_filetype#same_filetypes.html = 'css'
'''

[[plugins]]
repo = 'vim-vdebug/vdebug'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <C-x><C-w> :NERDTreeToggle<CR>
let g:NERDTreeMapActivateNode = "l"
let g:NERDTreeMapOpenRecursively = "L"
let g:NERDTreeMapUpdir = "h"
let g:NERDTreeMapUpdirKeepOpen = "H"
let g:NERDTreeShowHidden = 1
let g:NERDTreeShowLineNumbers=1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['scrooloose/nerdtree']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
depends = ['deoplete']
hook_add = '''
let g:LanguageClient_serverCommands = {
  \ 'python':['pyls'],
  \ 'jinja':['pyls'],
  \ 'ruby': ['solargraph', 'stdio'],
  \ 'slim': ['solargraph', 'stdio'],
  \ 'haml': ['solargraph', 'stdio'],
  \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
  \ 'typescript': ['/usr/local/bin/javascript-typescript-stdio'],
  \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
  \ 'typescript.tsx': ['tcp://127.0.0.1:2089'],
  \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
  \ 'go': ['go-langserer']
  \ }
call deoplete#custom#source('LanguageClient',
  \ 'min_pattern_length',
  \ 2)
'''

[[plugins]]
repo = 'RRethy/vim-illuminate'
hook_add = '''
let g:Illuminate_delay = 250
let g:Illuminate_ftHighlightGroups = {
      \ 'vim': ['vimVar', 'vimString', 'vimLineComment',
      \         'vimFuncName', 'vimFunction', 'vimUserFunc', 'vimFunc'],
      \ 'ruby': ['rubyFunction', 'rubySymbol', 'rubyString', 'rubyClassName',
      \          'rubyModuleName', 'rubyConstant'],
      \ 'javascript': ['jsFuncName', 'jsClassFuncName', 'jsArguments', 'jsString',
      \                'jsModuleKeyword', 'jsVariableDef'],
      \ 'python': ['pythonFunction']
      \ }
let g:Illuminate_ftblacklist = ['nerdtree']
nnoremap <C-x><C-t> <Esc>:call LanguageClient#textDocument_definition()<CR>
nnoremap <C-x><C-j> <Esc>:call LanguageClient#textDocument_typeDefinition()<CR>
'''

[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
'''

[[plugins]]
repo = 'ymyzk/vim-copl'
